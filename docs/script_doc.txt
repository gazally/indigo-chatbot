Help on module script:

NAME
    script - chatbot_reply.script, defines decorators and superclass for chatbot scripts

FILE
    /Users/gemini/Projects/Python/Chatbot/Chatbot.indigoPlugin/Contents/Server Plugin/chatbot_reply/script.py

CLASSES
    __builtin__.object
        Script
    __builtin__.type(__builtin__.object)
        ScriptRegistrar
    
    class Script(__builtin__.object)
     |  Base class for Chatbot Engine Scripts
     |  
     |  Classes derived from this one can be loaded by the ChatbotEngine.
     |  
     |  Subclasses may define: 
     |  
     |  topic - This must be a class attribute, not an instance variable.
     |      Contains a string that is inspected when the class is
     |      imported. All rules and substitution functions in a class are
     |      associated with a topic, and will only be used to process a user's
     |      message when the user's topic is equal to the class
     |      topic. Changing this value for a class after import will have no
     |      effect.  If topic is set to None, the class will not be instantiated,
     |      so __init__, setup and setup_user will not be run. If you 
     |      want to share a lot of rules between two Script subclasses with
     |      different topics, have them inherit them from a base class with
     |      its topic set to None.
     |  setup(self) - a method that may be used to define alternates (see below)
     |      and to initialize bot variables. It will be called after the class is
     |      loaded, and may be called again if resetting bot variables is implemented.
     |  setup_user(self, user) - a method that is called the first time the engine
     |      is processing a message from a given user. This is a good place to initialize
     |      user variables used by a script.
     |  alternates - a dictionary of patterns. Key names must be alphanumeric and
     |      may not begin with an underscore or number. The patterns must be simple
     |      in that they can't contain references to variables or wildcards or
     |      the memorization character _. When the patterns for the rules are 
     |      imported the alternates will be substituted in at import time, as 
     |      opposed to user and bot variables, which are substituted in every time
     |      a rule is matched with a new message. If you have 20,000 rules, this
     |      might make a performance difference, but if you have 20, it won't. 
     |      Changing self.alternates after import will have no effect on pattern matching.
     |  substitute(self, text, list_of_lists) - Any method name defined by a subclass
     |      that begins with substitute will be called with the raw text of every
     |      message (within its topic) and a list of list of words that have been
     |      split on whitespace. It must return a list of lists of words where the 
     |      outer list is the same length. Use this to do things like expand
     |      contractions, interpret ascii smileys such as >:| and otherwise mess
     |      with the tokenizations. If there is more than one substitute method 
     |      for a topic, they will all be called in an unpredictable order, each
     |      passed the output of the one before.
     |  @rule(pattern, previous="", weight=1)
     |  rule(self) - methods decorated by @rule and beginning with "rule" are
     |      the gears of the script engine. The engine will select one rule method 
     |      that matches a message and call it. The @rule decorator will run the 
     |      method's return value through first self.choose then self.process_reply.
     |  
     |  Child classes may overload self.choose and self.process_reply if they would
     |  like different behavior.
     |  
     |  Public class attributes that are meant to be used but not modified by
     |  child classes:
     |  botvars - dictionary of variable names and values that are global for
     |      all users of the chatbot engine
     |  uservars - dictionary of variable names and values for the current user
     |  user - hashable value representing the current user
     |  match - a Match object (see rules.py) representing the relationship between
     |      the matched user input (and previous reply, if applicable) and the 
     |      rule's patterns
     |  current_topic - string giving current conversation topic, which
     |      will limit the rule search for the next message
     |  
     |  All of the above are set by the ChatbotEngine.
     |  
     |  Methods defined here:
     |  
     |  choose(self, args)
     |      Select a response from a list of possible responses. For increased
     |      flexibility, since this is used to process all return values from all
     |      rules, this can also be passed None or an empty string or list, in which
     |      case it will return the empty string, or it may be passed a string, which
     |      it will simply return.
     |      If the argument is a list of strings, select one randomly and return it.
     |      If the argument is a list of tuples containing a string and an integer 
     |      weight, select a string randomly with the probability of its selection 
     |      being proportional to the weight.
     |  
     |  process_reply(self, string)
     |      Process a reply before returning it to the chatbot engine. The only
     |      thing this does is use built-in string formatting to substitute in the 
     |      match results.
     |  
     |  setup(self)
     |      placeholder
     |  
     |  setup_user(self, user)
     |      placeholder
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  set_topic(cls, new_topic) from ScriptRegistrar
     |      change the current topic
     |  
     |  set_user(cls, user, uservars) from ScriptRegistrar
     |      set class attributes associated with a user
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  botvars = None
     |  
     |  current_topic = None
     |  
     |  match = None
     |  
     |  topic = u'all'
     |  
     |  user = None
     |  
     |  uservars = None
    
    ScriptRegistrar = <class 'script.ScriptRegistrar'>

FUNCTIONS
    kill_non_alphanumerics(text)
        remove any non-alphanumeric characters from a string and return the
        result. re.sub doesn't do UNICODE in python 2.6.
    
    rule(pattern_text, previous_reply=u'', weight=1)
        decorator for rules in subclasses of Script
    
    split_on_whitespace(text)
        Because this has to work in Py 2.6, and re.split doesn't do UNICODE
        in 2.6.  Return text broken into words by whitespace.

DATA
    unicode_literals = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', ...


